Model Context Protocol (MCP) Architecture Summary:

* Overview: MCP uses a client-server architecture for communication between LLM applications (Hosts), Clients, and Servers (providing context, tools, and prompts). Clients maintain 1:1 connections with servers within the host application.
* Core Components:
    * Protocol Layer: Handles message framing, request/response linking, and communication patterns. Key classes: `Protocol`, `Client`, `Server`.
    * Transport Layer: Handles communication via Stdio (local processes) or Streamable HTTP (remote communication). Uses JSON-RPC 2.0 for message exchange.
    * Message Types: Requests (expect response), Results (successful response), Errors (request failed), Notifications (one-way).
* Connection Lifecycle:
    1. Initialization: Client sends initialize request, server responds, client sends initialized notification.
    2. Message Exchange: Request-Response or Notifications.
    3. Termination: Clean shutdown, transport disconnection, or error conditions.
* Error Handling: Uses standard JSON-RPC error codes and allows custom error codes. Errors are propagated via error responses, transport events, and protocol-level error handlers.
* Best Practices:
    * Transport Selection: Stdio for local, Streamable HTTP for remote.
    * Message Handling: Validate inputs, use type-safe schemas, handle errors gracefully, implement timeouts, use progress tokens, include helpful error messages, clean up resources on errors.
* Security Considerations: Transport security (TLS), message validation, resource protection (access controls, rate limiting), error handling (avoid leaking sensitive information).
* Debugging and Monitoring: Logging (protocol events, message flow, performance, errors), diagnostics (health checks, connection state, resource usage, profiling), testing (different transports, error handling, edge cases, load testing).